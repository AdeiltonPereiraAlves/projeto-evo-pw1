// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum TipoUsuario {
  VOLUNTARIO
  ONG
}
enum Status{
  ENCERRADO
  ABERTO
}

enum Disponibilidade {
  manha
  tarde
  noite
  integral
}

enum AreaAtuacao {
  EDUCACAO
  SAUDE
  AMBIENTE
  TECNOLOGIA
  CULTURA
  DIREITOS_HUMANOS
  FOME
  POBREZA
  ANIMAL
  CRIANCA
  MULHER
  IGUALDADE
  IDOSO
  LGBTQIA
  REFUGIADOS
  EDUCACAO_INFANTIL
  EMPREGO
  VOLUNTARIADO
  ESPORTES
  ARTE
  FAMILIA
  SAUDE_MENTAL
  REABILITACAO
  JUSTICA_SOCIAL
  SEGURANCA_ALIMENTAR
  DESENVOLVIMENTO_SUSTENTAVEL
  INFRAESTRUTURA
  EMPODERAMENTO
  TECNOLOGIA_SOCIAL
}


model Voluntario {
  id              String            @id @default(uuid())
  nome       String
  email      String  @unique
  senha      String?
  imagem     String
  tipo       TipoUsuario
  contato String
  cpf String  @unique
  interesses      String[]
  habilidades     String[]
  disponibilidade Disponibilidade[]
  inscricoes Inscricao[]
  avaliacoes Avaliacao[]
  latitude Float?
  longitude Float?
 
}

model Ong {
  id          String   @id @default(uuid())
  nome       String
  email      String  @unique
  senha      String?
  tipo       TipoUsuario
  cnpj        String   @unique
  descricao   String
  missao       String
  visao       String
  areaAtuacao AreaAtuacao[]
  endereco    String
  vagas Vaga[]
  avaliacoes Avaliacao[]
  
}

enum TipoTrabalho {
  PRESENCIAL
  REMOTO
  HIBRIDO
}
model Vaga{
  id String @id @default(uuid())
  ongId String
  titulo String
  descricao String
  requisitos String[]
  quantidade Int
  status Status
  duracao String
  localizacao String
  tipoTrabalho TipoTrabalho
  latitude Float
  longitude Float
  ong Ong @relation(fields:[ongId], references: [id], onDelete: Cascade)
  inscricoes Inscricao[] 
  createdAt  DateTime @default(now()) // Criado automaticamente na inserção
  updatedAt  DateTime @updatedAt      // Atualizado automaticamente na modificação
}
enum StatusInscricao{
  pendente
  aprovado
  rejeitado
}
model Inscricao{
  id String @id @default(uuid())
  voluntarioId String
  vagaId String
  data  DateTime @default(now())
  status StatusInscricao
  ativo  Boolean  @default(false)
  voluntario Voluntario @relation(fields:[voluntarioId], references: [id], onDelete: Cascade)
  vaga Vaga @relation(fields:[vagaId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) // Criado automaticamente na inserção
  updatedAt  DateTime @updatedAt      // Atualizado automaticamente na modificação
}

model Avaliacao{
  id String @id @default(uuid())
  voluntarioId String
  ongId String
  avaliadoId  String
  data DateTime @default(now())
  frequecia String?
  tipo TipoUsuario
  comentario String
  nota Int
  voluntario Voluntario @relation(fields:[voluntarioId], references: [id],onDelete: Cascade)
  ong Ong @relation(fields:[ongId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) // Criado automaticamente na inserção
  updatedAt  DateTime @updatedAt      // Atualizado automaticamente na modificação
}
